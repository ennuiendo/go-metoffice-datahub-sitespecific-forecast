// Package sitespecific provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sitespecific

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// Feature A feature object with mandatory geometry and properties fields
type Feature struct {
	Geometry   Point      `json:"geometry"`
	Properties Properties `json:"properties"`

	// Type The GeoJSON type identifier
	Type string `json:"type"`
}

// Location defines model for Location.
type Location struct {
	// Licence The licence for the forecast location name
	Licence *string `json:"licence,omitempty"`

	// Name The forecast location name
	Name *string `json:"name,omitempty"`
}

// ParameterDetails defines model for ParameterDetails.
type ParameterDetails struct {
	Description *string `json:"description,omitempty"`
	Type        *string `json:"type,omitempty"`
	Unit        *Unit   `json:"unit,omitempty"`
}

// Point defines model for Point.
type Point struct {
	// Coordinates The longitude, latitude and elevation values for the point
	Coordinates []float32 `json:"coordinates"`

	// Type The GeoJSON type identifier
	Type string `json:"type"`
}

// Properties defines model for Properties.
type Properties struct {
	Location *Location `json:"location,omitempty"`

	// ModelRunDate The model run date in UTC
	ModelRunDate string `json:"modelRunDate"`

	// RequestPointDistance The distance from the requested point in metres
	RequestPointDistance float32 `json:"requestPointDistance"`

	// TimeSeries A time step ordered list  of forecast parameters and associated values
	TimeSeries []map[string]interface{} `json:"timeSeries"`
}

// SpotForecastFeatureCollection A feature collection object, must have a member array of features
type SpotForecastFeatureCollection struct {
	// Features A list of feature objects
	Features []Feature `json:"features"`

	// Parameters Forecast parameter metadata for all possible forecast parameters in response - each forecast parameter has a nested object containing a unit of measurement, using standard unit representation as defined by UCUM - http://unitsofmeasure.org/ucum.html - and an optional parameter definition
	Parameters []map[string]ParameterDetails `json:"parameters"`

	// Type The GeoJSON type identifier
	Type string `json:"type"`
}

// Symbol defines model for Symbol.
type Symbol struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Unit defines model for Unit.
type Unit struct {
	// Label The name of the unit
	Label  string `json:"label"`
	Symbol Symbol `json:"symbol"`
}

// VndError defines model for VndError.
type VndError struct {
	Logref  *string `json:"logref,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetDailyForecastForPointUsingGETParams defines parameters for GetDailyForecastForPointUsingGET.
type GetDailyForecastForPointUsingGETParams struct {
	// DataSource The request data source must be BD1.
	DataSource *interface{} `form:"dataSource,omitempty" json:"dataSource,omitempty"`

	// ExcludeParameterMetadata If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.
	ExcludeParameterMetadata *interface{} `form:"excludeParameterMetadata,omitempty" json:"excludeParameterMetadata,omitempty"`

	// IncludeLocationName If true, include location name in the response. If false or undefined, no location name is returned.
	IncludeLocationName *interface{} `form:"includeLocationName,omitempty" json:"includeLocationName,omitempty"`

	// Latitude The request latitude value in range -85/+85 expressed as a decimal fraction.
	Latitude interface{} `form:"latitude" json:"latitude"`

	// Longitude The request longitude value in range -180/+180 expressed as a decimal fraction.
	Longitude interface{} `form:"longitude" json:"longitude"`
}

// GetHourlyForecastForPointUsingGETParams defines parameters for GetHourlyForecastForPointUsingGET.
type GetHourlyForecastForPointUsingGETParams struct {
	// DataSource The request data source must be BD1.
	DataSource *interface{} `form:"dataSource,omitempty" json:"dataSource,omitempty"`

	// ExcludeParameterMetadata If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.
	ExcludeParameterMetadata *interface{} `form:"excludeParameterMetadata,omitempty" json:"excludeParameterMetadata,omitempty"`

	// IncludeLocationName If true, include location name in the response. If false or undefined, no location name is returned.
	IncludeLocationName *interface{} `form:"includeLocationName,omitempty" json:"includeLocationName,omitempty"`

	// Latitude The request latitude value in range -85/+85 expressed as a decimal fraction.
	Latitude interface{} `form:"latitude" json:"latitude"`

	// Longitude The request longitude value in range -180/+180 expressed as a decimal fraction.
	Longitude interface{} `form:"longitude" json:"longitude"`
}

// GetThreeHourlyForecastForPointUsingGETParams defines parameters for GetThreeHourlyForecastForPointUsingGET.
type GetThreeHourlyForecastForPointUsingGETParams struct {
	// DataSource The request data source must be BD1.
	DataSource *interface{} `form:"dataSource,omitempty" json:"dataSource,omitempty"`

	// ExcludeParameterMetadata If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.
	ExcludeParameterMetadata *interface{} `form:"excludeParameterMetadata,omitempty" json:"excludeParameterMetadata,omitempty"`

	// IncludeLocationName If true, include location name in the response. If false or undefined, no location name is returned.
	IncludeLocationName *interface{} `form:"includeLocationName,omitempty" json:"includeLocationName,omitempty"`

	// Latitude The request latitude value in range -85/+85 expressed as a decimal fraction.
	Latitude interface{} `form:"latitude" json:"latitude"`

	// Longitude The request longitude value in range -180/+180 expressed as a decimal fraction.
	Longitude interface{} `form:"longitude" json:"longitude"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDailyForecastForPointUsingGET request
	GetDailyForecastForPointUsingGET(ctx context.Context, params *GetDailyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHourlyForecastForPointUsingGET request
	GetHourlyForecastForPointUsingGET(ctx context.Context, params *GetHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetThreeHourlyForecastForPointUsingGET request
	GetThreeHourlyForecastForPointUsingGET(ctx context.Context, params *GetThreeHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDailyForecastForPointUsingGET(ctx context.Context, params *GetDailyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyForecastForPointUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHourlyForecastForPointUsingGET(ctx context.Context, params *GetHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHourlyForecastForPointUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetThreeHourlyForecastForPointUsingGET(ctx context.Context, params *GetThreeHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThreeHourlyForecastForPointUsingGETRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDailyForecastForPointUsingGETRequest generates requests for GetDailyForecastForPointUsingGET
func NewGetDailyForecastForPointUsingGETRequest(server string, params *GetDailyForecastForPointUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/point/daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DataSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataSource", runtime.ParamLocationQuery, *params.DataSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParameterMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeParameterMetadata", runtime.ParamLocationQuery, *params.ExcludeParameterMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeLocationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeLocationName", runtime.ParamLocationQuery, *params.IncludeLocationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latitude", runtime.ParamLocationQuery, params.Latitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "longitude", runtime.ParamLocationQuery, params.Longitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHourlyForecastForPointUsingGETRequest generates requests for GetHourlyForecastForPointUsingGET
func NewGetHourlyForecastForPointUsingGETRequest(server string, params *GetHourlyForecastForPointUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/point/hourly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DataSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataSource", runtime.ParamLocationQuery, *params.DataSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParameterMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeParameterMetadata", runtime.ParamLocationQuery, *params.ExcludeParameterMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeLocationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeLocationName", runtime.ParamLocationQuery, *params.IncludeLocationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latitude", runtime.ParamLocationQuery, params.Latitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "longitude", runtime.ParamLocationQuery, params.Longitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThreeHourlyForecastForPointUsingGETRequest generates requests for GetThreeHourlyForecastForPointUsingGET
func NewGetThreeHourlyForecastForPointUsingGETRequest(server string, params *GetThreeHourlyForecastForPointUsingGETParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/point/three-hourly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DataSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataSource", runtime.ParamLocationQuery, *params.DataSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParameterMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeParameterMetadata", runtime.ParamLocationQuery, *params.ExcludeParameterMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeLocationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeLocationName", runtime.ParamLocationQuery, *params.IncludeLocationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latitude", runtime.ParamLocationQuery, params.Latitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "longitude", runtime.ParamLocationQuery, params.Longitude); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDailyForecastForPointUsingGETWithResponse request
	GetDailyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetDailyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetDailyForecastForPointUsingGETResponse, error)

	// GetHourlyForecastForPointUsingGETWithResponse request
	GetHourlyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetHourlyForecastForPointUsingGETResponse, error)

	// GetThreeHourlyForecastForPointUsingGETWithResponse request
	GetThreeHourlyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetThreeHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetThreeHourlyForecastForPointUsingGETResponse, error)
}

type GetDailyForecastForPointUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpotForecastFeatureCollection
	JSON400      *VndError
	JSON404      *VndError
	JSON405      *VndError
	JSON415      *VndError
	JSON500      *VndError
}

// Status returns HTTPResponse.Status
func (r GetDailyForecastForPointUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyForecastForPointUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHourlyForecastForPointUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpotForecastFeatureCollection
	JSON400      *VndError
	JSON404      *VndError
	JSON405      *VndError
	JSON415      *VndError
	JSON500      *VndError
}

// Status returns HTTPResponse.Status
func (r GetHourlyForecastForPointUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHourlyForecastForPointUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThreeHourlyForecastForPointUsingGETResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpotForecastFeatureCollection
	JSON400      *VndError
	JSON404      *VndError
	JSON405      *VndError
	JSON415      *VndError
	JSON500      *VndError
}

// Status returns HTTPResponse.Status
func (r GetThreeHourlyForecastForPointUsingGETResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThreeHourlyForecastForPointUsingGETResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDailyForecastForPointUsingGETWithResponse request returning *GetDailyForecastForPointUsingGETResponse
func (c *ClientWithResponses) GetDailyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetDailyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetDailyForecastForPointUsingGETResponse, error) {
	rsp, err := c.GetDailyForecastForPointUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyForecastForPointUsingGETResponse(rsp)
}

// GetHourlyForecastForPointUsingGETWithResponse request returning *GetHourlyForecastForPointUsingGETResponse
func (c *ClientWithResponses) GetHourlyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetHourlyForecastForPointUsingGETResponse, error) {
	rsp, err := c.GetHourlyForecastForPointUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHourlyForecastForPointUsingGETResponse(rsp)
}

// GetThreeHourlyForecastForPointUsingGETWithResponse request returning *GetThreeHourlyForecastForPointUsingGETResponse
func (c *ClientWithResponses) GetThreeHourlyForecastForPointUsingGETWithResponse(ctx context.Context, params *GetThreeHourlyForecastForPointUsingGETParams, reqEditors ...RequestEditorFn) (*GetThreeHourlyForecastForPointUsingGETResponse, error) {
	rsp, err := c.GetThreeHourlyForecastForPointUsingGET(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThreeHourlyForecastForPointUsingGETResponse(rsp)
}

// ParseGetDailyForecastForPointUsingGETResponse parses an HTTP response from a GetDailyForecastForPointUsingGETWithResponse call
func ParseGetDailyForecastForPointUsingGETResponse(rsp *http.Response) (*GetDailyForecastForPointUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyForecastForPointUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpotForecastFeatureCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHourlyForecastForPointUsingGETResponse parses an HTTP response from a GetHourlyForecastForPointUsingGETWithResponse call
func ParseGetHourlyForecastForPointUsingGETResponse(rsp *http.Response) (*GetHourlyForecastForPointUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHourlyForecastForPointUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpotForecastFeatureCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetThreeHourlyForecastForPointUsingGETResponse parses an HTTP response from a GetThreeHourlyForecastForPointUsingGETWithResponse call
func ParseGetThreeHourlyForecastForPointUsingGETResponse(rsp *http.Response) (*GetThreeHourlyForecastForPointUsingGETResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThreeHourlyForecastForPointUsingGETResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpotForecastFeatureCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest VndError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
